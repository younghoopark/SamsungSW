#include <iostream>
using namespace std;

struct SHARK {
	int r, c, s, d, z;
	int idx;
};

int r, c, m;
SHARK map[101][101] = { 0, };
SHARK shark[10000];

int fisher_pos = 0;				//낚시꾼 위치
int ans = 0;
void catch_shark() {
	int shark_idx = -1;
	int min_row = 101;
	/* 낚시꾼이 잡을 상어의 인덱스를 받아온다. */
	for (int i = 0; i < m; i++) {
		if (shark[i].c == fisher_pos) {
			if (shark[i].r < min_row) {
				min_row = shark[i].r;
				shark_idx = i;
			}
		}
	}
	if (shark_idx != -1) {
		ans += shark[shark_idx].z;		//잡은 상어의 크기만큼 ans에 더해준다.
		shark[shark_idx].r = 0, shark[shark_idx].c = 0, shark[shark_idx].s = 0, shark[shark_idx].d = 0, shark[shark_idx].z = 0;		//잡힌 상어는 모든 값을 0으로 초기화, 즉 1 <= r, c <= 100 인 격자판에서 빼줬다고 생각.
	}
}

void move_shark() {
	SHARK updatemap[101][101] = { 0, };
	int idx;
	int move_cnt;
	for (int i = 0; i < m; i++) {
		if (shark[i].r == 0 && shark[i].c == 0) {		//잡아먹힌 상어에 대해서.
			continue;
		}
		
		move_cnt = shark[i].s;
		/* 위 아래 */
		if (shark[i].d == 1 || shark[i].d == 2) {
			move_cnt %= ((r - 1) * 2);
			while (move_cnt != 0) {
				if (shark[i].r == 1 && shark[i].d == 1) {
					shark[i].d = 2;
				}
				else if (shark[i].r == r && shark[i].d == 2) {
					shark[i].d = 1;
				}

				--move_cnt;
				if (shark[i].d == 1) {
					shark[i].r -= 1;
				}
				else if (shark[i].d == 2) {
					shark[i].r += 1;
				}
			}
		}

		/* 오른쪽 왼쪽 */
		if (shark[i].d == 3 || shark[i].d == 4) {
			move_cnt %= ((c - 1) * 2);
			while (move_cnt != 0) {
				if (shark[i].c == 1 && shark[i].d == 4) {
					shark[i].d = 3;
				}
				else if (shark[i].c == c && shark[i].d == 3) {
					shark[i].d = 4;
				}

				--move_cnt;
				if (shark[i].d == 3) {
					shark[i].c += 1;
				}
				else if (shark[i].d == 4) {
					shark[i].c -= 1;
				}
			}
		}
		
		/* 상어 위치들 비교해 가면서 같은 위치에 있을 경우 상어 사이즈를 비교해서 상어를 먹는 부분 구현 */
		/* for (int j = i - 1; j >= 0; j--) {
			if (shark[i].r == shark[j].r && shark[i].c == shark[j].c) {
				if (shark[i].z > shark[j].z) {
					shark[j].r = 0, shark[j].c = 0, shark[j].s = 0, shark[j].d = 0, shark[j].z = 0;
				}
				else {
					shark[i].r = 0, shark[i].c = 0, shark[i].s = 0, shark[i].d = 0, shark[i].z = 0;
					break;
				}
			}
		} */

		/* 상어 먹는 부분 구현 */
		if (updatemap[shark[i].r][shark[i].c].z == 0) {					//비어있는 곳에 상어가 처음 들어간 경우
			updatemap[shark[i].r][shark[i].c] = shark[i];
		}
		else if (updatemap[shark[i].r][shark[i].c].z < shark[i].z) {	//비어있지 않은데 상어가 들어간 경우에, 새로 들어간 상어가 더 클 경우, 기존 상어 삭제
			shark[updatemap[shark[i].r][shark[i].c].idx].r = 0, shark[updatemap[shark[i].r][shark[i].c].idx].c = 0, shark[updatemap[shark[i].r][shark[i].c].idx].s = 0, shark[updatemap[shark[i].r][shark[i].c].idx].d = 0, shark[updatemap[shark[i].r][shark[i].c].idx].z = 0;
			updatemap[shark[i].r][shark[i].c] = shark[i];
		}
		else if (updatemap[shark[i].r][shark[i].c].z > shark[i].z) {		//비어있지 않은데 상어가 들어간 경우에, 새로 들어간 상어가 더 작을 경우, 새로들어간 상어 삭제
			shark[i].r = 0, shark[i].c = 0, shark[i].s = 0, shark[i].d = 0, shark[i].z = 0;
		}
	}
}

int main()
{
	scanf("%d %d %d", &r, &c, &m);
	for (int i = 0; i < m; i++) {
		scanf("%d %d %d %d %d", &shark[i].r, &shark[i].c, &shark[i].s, &shark[i].d, &shark[i].z);
		shark[i].idx = i;
		map[shark[i].r][shark[i].c] = shark[i];
	}
	
	for (int x = 1; x <= c; x++) {		//매 초 마다 일어나야 할 행동
		/* TODO */
		// 낚시꾼 오른쪽으로 한칸 이동
		++fisher_pos;

		// 낚시꾼이 위치한 열의 상어중 가장 가까운 상어(r값이 가장 작은 물고기) 잡기
		catch_shark();

		// moving shark
		move_shark();
	}

	printf("%d\n", ans);

	return 0;
}

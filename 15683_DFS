#include <iostream>
#include <cstring>
using namespace std;

struct CCTV {
	int r;
	int c;
	int type;
};
CCTV cctv[8];
int n, m, map[8][8], cctv_cnt = 0, ans = 100;
int dirofcctv[6] = { 0, 4, 2, 4, 4, 1 };

void findans()
{
	int cnt = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (map[i][j] == 0) cnt++;
		}
	}
	if (cnt < ans) ans = cnt;
}
void updatemap(int idx, int dir)
{
	dir = dir % 4;
	int r = cctv[idx].r;
	int c = cctv[idx].c;
	while (r >= 0 && r < n && c >= 0 && c < m) {
		if (dir == 0) {
			r -= 1;
		}
		else if (dir == 1) {
			c += 1;
		}
		else if (dir == 2) {
			r += 1;
		}
		else if (dir == 3) {
			c -= 1;
		}
		if (r < 0 || r >= n || c < 0 || c >= m) {
			break;
		}
		if (map[r][c] == 6) break;
		else if (map[r][c] == 0) {
			map[r][c] = 9;
		}
	}
}
void dfs(int cctv_idx)
{
	if (cctv_idx == cctv_cnt){		//종료 조건
		findans();
		return;
	}
	int type = cctv[cctv_idx].type;
	int beforemap[8][8];
	for (int dir = 0; dir < dirofcctv[type]; dir++) {
		memcpy(beforemap, map, sizeof(map));		//복사
		
		if (type == 1) {
			updatemap(cctv_idx, dir);
		}
		else if (type == 2) {
			updatemap(cctv_idx, dir);
			updatemap(cctv_idx, dir + 2);
		}
		else if (type == 3) {
			updatemap(cctv_idx, dir);
			updatemap(cctv_idx, dir + 1);
		}
		else if (type == 4) {
			updatemap(cctv_idx, dir);
			updatemap(cctv_idx, dir + 1);
			updatemap(cctv_idx, dir + 2);
		}
		else if (type == 5) {
			updatemap(cctv_idx, dir);
			updatemap(cctv_idx ,dir + 1);
			updatemap(cctv_idx, dir + 2);
			updatemap(cctv_idx, dir + 3);
		}
		dfs(cctv_idx + 1);

		memcpy(map, beforemap, sizeof(map));		//복원
	}
	
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> map[i][j];
			if (1 <= map[i][j] && map[i][j] <= 5) {
				cctv[cctv_cnt].r = i;
				cctv[cctv_cnt].c = j;
				cctv[cctv_cnt].type = map[i][j];
				cctv_cnt++;
			}
		}
	}

	dfs(0);
	cout << ans << endl;

	return 0;
}

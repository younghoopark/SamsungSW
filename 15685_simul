#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

int dg[102][102];
int dir[4][2] = { {1,0}, {0,-1}, {-1,0}, {0,1} };		//{x,y}
int squarenum = 0;

void findsquare()
{
	int i, j;
	for (i = 0; i <= 100; i++)
	{
		for (j = 0; j <= 100; j++)
		{
			if (dg[i][j] == 1 && dg[i][j + 1] == 1 && dg[i + 1][j] == 1 && dg[i + 1][j + 1] == 1)
			{
				squarenum++;
			}
		}
	}
}
void dragoncurve(int x, int y, int d, int g)
{
	int i, j;
	int newx, newy;
	vector<int> v;
	int idx;
	v.push_back(d);
	for (i = 0; i < g; i++)
	{
		idx = v.size();
		for (j = idx - 1; j >= 0; j--)
		{
			if (v[j] == 0) d = 1;
			else if (v[j] == 1) d = 2;
			else if (v[j] == 2) d = 3;
			else if (v[j] == 3) d = 0;
			v.push_back(d);
		}
	}
	
	dg[y][x] = 1;
	for (i = 0; i < v.size(); i++)
	{
		newx = x + dir[v[i]][0];
		newy = y + dir[v[i]][1];
		if (newx >= 0 && newx <= 100 && newy >= 0 && newy <= 100)
		{
			dg[newy][newx] = 1;
			x = newx;
			y = newy;
		}
	}
}

int main()
{
	int n;
	int x, y, d, g;

	cin >> n;
	int i;
	for (i = 0; i < n; i++)
	{
		cin >> x >> y >> d >> g;
		dragoncurve(x, y, d, g);
	}
	findsquare();
	cout << squarenum << endl;

	return 0;
}

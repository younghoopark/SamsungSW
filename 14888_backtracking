#include <iostream>
#include <vector>
#include <climits>
#include <algorithm>
using namespace std;

vector<char>oper;
vector<char> v;
vector < vector<char> > vv;
int N, num[11], opernum[4], maxnum = INT_MIN, minnum = INT_MAX;
bool visited[11];

void findmaxmin()
{
	int val;
	for (int i = 0; i < vv.size(); i++)
	{
		val = num[0];
		for (int j = 0; j < vv[i].size(); j++)
		{
			if (vv[i][j] == '+')
			{
				val += num[j + 1];
			}
			else if (vv[i][j] == '-')
			{
				val -= num[j + 1];
			}
			else if (vv[i][j] == '*')
			{
				val *= num[j + 1];
			}
			else if (vv[i][j] == '/')
			{
				val /= num[j + 1];
			}
		}
		if (val > maxnum) maxnum = val;
		if (val < minnum) minnum = val;
	}
}
void dfs(int idx, int len)
{
	int i;
	if (len == N - 1)
	{
		vv.push_back(v);
		return;
	}
	for (i = 0; i < N-1; i++)
	{
		if (!visited[i])
		{
			v.push_back(oper[i]); visited[i] = true;
			dfs(i + 1, len + 1);
			v.pop_back(); visited[i] = false;
		}
	}
}
int main()
{
	cin >> N;
	for (int i = 0; i < N; i++) cin >> num[i];
	for (int i = 0; i < 4; i++) cin >> opernum[i];
	for (int i = 0; i < opernum[0]; i++) oper.push_back('+');
	for (int i = 0; i < opernum[1]; i++) oper.push_back('-');
	for (int i = 0; i < opernum[2]; i++) oper.push_back('*');
	for (int i = 0; i < opernum[3]; i++) oper.push_back('/');
	dfs(0, 0);
	sort(vv.begin(), vv.end());
	vv.erase(unique(vv.begin(), vv.end()), vv.end());
	findmaxmin();
	cout << maxnum << endl;
	cout << minnum << endl;

	return 0;
}
